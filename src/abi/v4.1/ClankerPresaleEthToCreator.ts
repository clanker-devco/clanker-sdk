export const Clanker_PresaleEthToCreator_v4_1_abi = [
  {
    type: 'constructor',
    inputs: [
      { name: 'owner_', type: 'address', internalType: 'address' },
      { name: 'factory_', type: 'address', internalType: 'address' },
      {
        name: 'withdrawFeeRecipient_',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'DEPLOYMENT_BAD_BUFFER',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'MAX_PRESALE_DURATION',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'SALT_SET_BUFFER',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'WITHDRAW_FEE_BPS',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'admins',
    inputs: [{ name: '', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'amountAvailableToClaim',
    inputs: [
      { name: 'presaleId', type: 'uint256', internalType: 'uint256' },
      { name: 'user', type: 'address', internalType: 'address' },
    ],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'buyIntoPresale',
    inputs: [{ name: 'presaleId', type: 'uint256', internalType: 'uint256' }],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'claimEth',
    inputs: [
      { name: 'presaleId', type: 'uint256', internalType: 'uint256' },
      { name: 'recipient', type: 'address', internalType: 'address' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'claimTokens',
    inputs: [{ name: 'presaleId', type: 'uint256', internalType: 'uint256' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'endPresale',
    inputs: [
      { name: 'presaleId', type: 'uint256', internalType: 'uint256' },
      { name: 'salt', type: 'bytes32', internalType: 'bytes32' },
    ],
    outputs: [{ name: 'token', type: 'address', internalType: 'address' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'factory',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract IClanker' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getPresale',
    inputs: [{ name: 'presaleId_', type: 'uint256', internalType: 'uint256' }],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct IClankerPresaleEthToCreator.Presale',
        components: [
          {
            name: 'deploymentConfig',
            type: 'tuple',
            internalType: 'struct IClanker.DeploymentConfig',
            components: [
              {
                name: 'tokenConfig',
                type: 'tuple',
                internalType: 'struct IClanker.TokenConfig',
                components: [
                  {
                    name: 'tokenAdmin',
                    type: 'address',
                    internalType: 'address',
                  },
                  { name: 'name', type: 'string', internalType: 'string' },
                  { name: 'symbol', type: 'string', internalType: 'string' },
                  { name: 'salt', type: 'bytes32', internalType: 'bytes32' },
                  { name: 'image', type: 'string', internalType: 'string' },
                  { name: 'metadata', type: 'string', internalType: 'string' },
                  { name: 'context', type: 'string', internalType: 'string' },
                  {
                    name: 'originatingChainId',
                    type: 'uint256',
                    internalType: 'uint256',
                  },
                ],
              },
              {
                name: 'poolConfig',
                type: 'tuple',
                internalType: 'struct IClanker.PoolConfig',
                components: [
                  { name: 'hook', type: 'address', internalType: 'address' },
                  {
                    name: 'pairedToken',
                    type: 'address',
                    internalType: 'address',
                  },
                  {
                    name: 'tickIfToken0IsClanker',
                    type: 'int24',
                    internalType: 'int24',
                  },
                  { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
                  { name: 'poolData', type: 'bytes', internalType: 'bytes' },
                ],
              },
              {
                name: 'lockerConfig',
                type: 'tuple',
                internalType: 'struct IClanker.LockerConfig',
                components: [
                  { name: 'locker', type: 'address', internalType: 'address' },
                  {
                    name: 'rewardAdmins',
                    type: 'address[]',
                    internalType: 'address[]',
                  },
                  {
                    name: 'rewardRecipients',
                    type: 'address[]',
                    internalType: 'address[]',
                  },
                  {
                    name: 'rewardBps',
                    type: 'uint16[]',
                    internalType: 'uint16[]',
                  },
                  {
                    name: 'tickLower',
                    type: 'int24[]',
                    internalType: 'int24[]',
                  },
                  {
                    name: 'tickUpper',
                    type: 'int24[]',
                    internalType: 'int24[]',
                  },
                  {
                    name: 'positionBps',
                    type: 'uint16[]',
                    internalType: 'uint16[]',
                  },
                  { name: 'lockerData', type: 'bytes', internalType: 'bytes' },
                ],
              },
              {
                name: 'mevModuleConfig',
                type: 'tuple',
                internalType: 'struct IClanker.MevModuleConfig',
                components: [
                  {
                    name: 'mevModule',
                    type: 'address',
                    internalType: 'address',
                  },
                  {
                    name: 'mevModuleData',
                    type: 'bytes',
                    internalType: 'bytes',
                  },
                ],
              },
              {
                name: 'extensionConfigs',
                type: 'tuple[]',
                internalType: 'struct IClanker.ExtensionConfig[]',
                components: [
                  {
                    name: 'extension',
                    type: 'address',
                    internalType: 'address',
                  },
                  {
                    name: 'msgValue',
                    type: 'uint256',
                    internalType: 'uint256',
                  },
                  {
                    name: 'extensionBps',
                    type: 'uint16',
                    internalType: 'uint16',
                  },
                  {
                    name: 'extensionData',
                    type: 'bytes',
                    internalType: 'bytes',
                  },
                ],
              },
            ],
          },
          {
            name: 'status',
            type: 'uint8',
            internalType: 'enum IClankerPresaleEthToCreator.PresaleStatus',
          },
          { name: 'recipient', type: 'address', internalType: 'address' },
          { name: 'minEthGoal', type: 'uint256', internalType: 'uint256' },
          { name: 'maxEthGoal', type: 'uint256', internalType: 'uint256' },
          { name: 'endTime', type: 'uint256', internalType: 'uint256' },
          { name: 'deployedToken', type: 'address', internalType: 'address' },
          { name: 'ethRaised', type: 'uint256', internalType: 'uint256' },
          { name: 'tokenSupply', type: 'uint256', internalType: 'uint256' },
          { name: 'deploymentExpected', type: 'bool', internalType: 'bool' },
          { name: 'ethClaimed', type: 'bool', internalType: 'bool' },
          { name: 'lockupDuration', type: 'uint256', internalType: 'uint256' },
          { name: 'vestingDuration', type: 'uint256', internalType: 'uint256' },
          { name: 'lockupEndTime', type: 'uint256', internalType: 'uint256' },
          { name: 'vestingEndTime', type: 'uint256', internalType: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'presaleBuys',
    inputs: [
      { name: 'presaleId', type: 'uint256', internalType: 'uint256' },
      { name: 'user', type: 'address', internalType: 'address' },
    ],
    outputs: [{ name: 'amount', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'presaleClaimed',
    inputs: [
      { name: 'presaleId', type: 'uint256', internalType: 'uint256' },
      { name: 'user', type: 'address', internalType: 'address' },
    ],
    outputs: [{ name: 'amount', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'presaleState',
    inputs: [{ name: 'presaleId', type: 'uint256', internalType: 'uint256' }],
    outputs: [
      {
        name: 'deploymentConfig',
        type: 'tuple',
        internalType: 'struct IClanker.DeploymentConfig',
        components: [
          {
            name: 'tokenConfig',
            type: 'tuple',
            internalType: 'struct IClanker.TokenConfig',
            components: [
              { name: 'tokenAdmin', type: 'address', internalType: 'address' },
              { name: 'name', type: 'string', internalType: 'string' },
              { name: 'symbol', type: 'string', internalType: 'string' },
              { name: 'salt', type: 'bytes32', internalType: 'bytes32' },
              { name: 'image', type: 'string', internalType: 'string' },
              { name: 'metadata', type: 'string', internalType: 'string' },
              { name: 'context', type: 'string', internalType: 'string' },
              {
                name: 'originatingChainId',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'poolConfig',
            type: 'tuple',
            internalType: 'struct IClanker.PoolConfig',
            components: [
              { name: 'hook', type: 'address', internalType: 'address' },
              { name: 'pairedToken', type: 'address', internalType: 'address' },
              {
                name: 'tickIfToken0IsClanker',
                type: 'int24',
                internalType: 'int24',
              },
              { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
              { name: 'poolData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'lockerConfig',
            type: 'tuple',
            internalType: 'struct IClanker.LockerConfig',
            components: [
              { name: 'locker', type: 'address', internalType: 'address' },
              {
                name: 'rewardAdmins',
                type: 'address[]',
                internalType: 'address[]',
              },
              {
                name: 'rewardRecipients',
                type: 'address[]',
                internalType: 'address[]',
              },
              { name: 'rewardBps', type: 'uint16[]', internalType: 'uint16[]' },
              { name: 'tickLower', type: 'int24[]', internalType: 'int24[]' },
              { name: 'tickUpper', type: 'int24[]', internalType: 'int24[]' },
              {
                name: 'positionBps',
                type: 'uint16[]',
                internalType: 'uint16[]',
              },
              { name: 'lockerData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'mevModuleConfig',
            type: 'tuple',
            internalType: 'struct IClanker.MevModuleConfig',
            components: [
              { name: 'mevModule', type: 'address', internalType: 'address' },
              { name: 'mevModuleData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'extensionConfigs',
            type: 'tuple[]',
            internalType: 'struct IClanker.ExtensionConfig[]',
            components: [
              { name: 'extension', type: 'address', internalType: 'address' },
              { name: 'msgValue', type: 'uint256', internalType: 'uint256' },
              { name: 'extensionBps', type: 'uint16', internalType: 'uint16' },
              { name: 'extensionData', type: 'bytes', internalType: 'bytes' },
            ],
          },
        ],
      },
      {
        name: 'status',
        type: 'uint8',
        internalType: 'enum IClankerPresaleEthToCreator.PresaleStatus',
      },
      { name: 'recipient', type: 'address', internalType: 'address' },
      { name: 'minEthGoal', type: 'uint256', internalType: 'uint256' },
      { name: 'maxEthGoal', type: 'uint256', internalType: 'uint256' },
      { name: 'endTime', type: 'uint256', internalType: 'uint256' },
      { name: 'deployedToken', type: 'address', internalType: 'address' },
      { name: 'ethRaised', type: 'uint256', internalType: 'uint256' },
      { name: 'tokenSupply', type: 'uint256', internalType: 'uint256' },
      { name: 'deploymentExpected', type: 'bool', internalType: 'bool' },
      { name: 'ethClaimed', type: 'bool', internalType: 'bool' },
      { name: 'lockupDuration', type: 'uint256', internalType: 'uint256' },
      { name: 'vestingDuration', type: 'uint256', internalType: 'uint256' },
      { name: 'lockupEndTime', type: 'uint256', internalType: 'uint256' },
      { name: 'vestingEndTime', type: 'uint256', internalType: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'receiveTokens',
    inputs: [
      {
        name: 'deploymentConfig',
        type: 'tuple',
        internalType: 'struct IClanker.DeploymentConfig',
        components: [
          {
            name: 'tokenConfig',
            type: 'tuple',
            internalType: 'struct IClanker.TokenConfig',
            components: [
              { name: 'tokenAdmin', type: 'address', internalType: 'address' },
              { name: 'name', type: 'string', internalType: 'string' },
              { name: 'symbol', type: 'string', internalType: 'string' },
              { name: 'salt', type: 'bytes32', internalType: 'bytes32' },
              { name: 'image', type: 'string', internalType: 'string' },
              { name: 'metadata', type: 'string', internalType: 'string' },
              { name: 'context', type: 'string', internalType: 'string' },
              {
                name: 'originatingChainId',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'poolConfig',
            type: 'tuple',
            internalType: 'struct IClanker.PoolConfig',
            components: [
              { name: 'hook', type: 'address', internalType: 'address' },
              { name: 'pairedToken', type: 'address', internalType: 'address' },
              {
                name: 'tickIfToken0IsClanker',
                type: 'int24',
                internalType: 'int24',
              },
              { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
              { name: 'poolData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'lockerConfig',
            type: 'tuple',
            internalType: 'struct IClanker.LockerConfig',
            components: [
              { name: 'locker', type: 'address', internalType: 'address' },
              {
                name: 'rewardAdmins',
                type: 'address[]',
                internalType: 'address[]',
              },
              {
                name: 'rewardRecipients',
                type: 'address[]',
                internalType: 'address[]',
              },
              { name: 'rewardBps', type: 'uint16[]', internalType: 'uint16[]' },
              { name: 'tickLower', type: 'int24[]', internalType: 'int24[]' },
              { name: 'tickUpper', type: 'int24[]', internalType: 'int24[]' },
              {
                name: 'positionBps',
                type: 'uint16[]',
                internalType: 'uint16[]',
              },
              { name: 'lockerData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'mevModuleConfig',
            type: 'tuple',
            internalType: 'struct IClanker.MevModuleConfig',
            components: [
              { name: 'mevModule', type: 'address', internalType: 'address' },
              { name: 'mevModuleData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'extensionConfigs',
            type: 'tuple[]',
            internalType: 'struct IClanker.ExtensionConfig[]',
            components: [
              { name: 'extension', type: 'address', internalType: 'address' },
              { name: 'msgValue', type: 'uint256', internalType: 'uint256' },
              { name: 'extensionBps', type: 'uint16', internalType: 'uint16' },
              { name: 'extensionData', type: 'bytes', internalType: 'bytes' },
            ],
          },
        ],
      },
      {
        name: '',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          { name: 'currency0', type: 'address', internalType: 'Currency' },
          { name: 'currency1', type: 'address', internalType: 'Currency' },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
          { name: 'hooks', type: 'address', internalType: 'contract IHooks' },
        ],
      },
      { name: 'token', type: 'address', internalType: 'address' },
      { name: 'extensionSupply', type: 'uint256', internalType: 'uint256' },
      { name: 'extensionIndex', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'renounceOwnership',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setAdmin',
    inputs: [
      { name: 'admin', type: 'address', internalType: 'address' },
      { name: 'enabled', type: 'bool', internalType: 'bool' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setWithdrawFeeRecipient',
    inputs: [{ name: 'recipient', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'startPresale',
    inputs: [
      {
        name: 'deploymentConfig',
        type: 'tuple',
        internalType: 'struct IClanker.DeploymentConfig',
        components: [
          {
            name: 'tokenConfig',
            type: 'tuple',
            internalType: 'struct IClanker.TokenConfig',
            components: [
              { name: 'tokenAdmin', type: 'address', internalType: 'address' },
              { name: 'name', type: 'string', internalType: 'string' },
              { name: 'symbol', type: 'string', internalType: 'string' },
              { name: 'salt', type: 'bytes32', internalType: 'bytes32' },
              { name: 'image', type: 'string', internalType: 'string' },
              { name: 'metadata', type: 'string', internalType: 'string' },
              { name: 'context', type: 'string', internalType: 'string' },
              {
                name: 'originatingChainId',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'poolConfig',
            type: 'tuple',
            internalType: 'struct IClanker.PoolConfig',
            components: [
              { name: 'hook', type: 'address', internalType: 'address' },
              { name: 'pairedToken', type: 'address', internalType: 'address' },
              {
                name: 'tickIfToken0IsClanker',
                type: 'int24',
                internalType: 'int24',
              },
              { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
              { name: 'poolData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'lockerConfig',
            type: 'tuple',
            internalType: 'struct IClanker.LockerConfig',
            components: [
              { name: 'locker', type: 'address', internalType: 'address' },
              {
                name: 'rewardAdmins',
                type: 'address[]',
                internalType: 'address[]',
              },
              {
                name: 'rewardRecipients',
                type: 'address[]',
                internalType: 'address[]',
              },
              { name: 'rewardBps', type: 'uint16[]', internalType: 'uint16[]' },
              { name: 'tickLower', type: 'int24[]', internalType: 'int24[]' },
              { name: 'tickUpper', type: 'int24[]', internalType: 'int24[]' },
              {
                name: 'positionBps',
                type: 'uint16[]',
                internalType: 'uint16[]',
              },
              { name: 'lockerData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'mevModuleConfig',
            type: 'tuple',
            internalType: 'struct IClanker.MevModuleConfig',
            components: [
              { name: 'mevModule', type: 'address', internalType: 'address' },
              { name: 'mevModuleData', type: 'bytes', internalType: 'bytes' },
            ],
          },
          {
            name: 'extensionConfigs',
            type: 'tuple[]',
            internalType: 'struct IClanker.ExtensionConfig[]',
            components: [
              { name: 'extension', type: 'address', internalType: 'address' },
              { name: 'msgValue', type: 'uint256', internalType: 'uint256' },
              { name: 'extensionBps', type: 'uint16', internalType: 'uint16' },
              { name: 'extensionData', type: 'bytes', internalType: 'bytes' },
            ],
          },
        ],
      },
      { name: 'minEthGoal', type: 'uint256', internalType: 'uint256' },
      { name: 'maxEthGoal', type: 'uint256', internalType: 'uint256' },
      { name: 'presaleDuration', type: 'uint256', internalType: 'uint256' },
      { name: 'recipient', type: 'address', internalType: 'address' },
      { name: 'lockupDuration', type: 'uint256', internalType: 'uint256' },
      { name: 'vestingDuration', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [{ name: 'presaleId', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'supportsInterface',
    inputs: [{ name: 'interfaceId', type: 'bytes4', internalType: 'bytes4' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'withdrawFeeAccumulated',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'withdrawFeeRecipient',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'withdrawFromPresale',
    inputs: [
      { name: 'presaleId', type: 'uint256', internalType: 'uint256' },
      { name: 'amount', type: 'uint256', internalType: 'uint256' },
      { name: 'recipient', type: 'address', internalType: 'address' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'withdrawWithdrawFee',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      {
        name: 'previousOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'SetAdmin',
    inputs: [
      {
        name: 'admin',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      { name: 'enabled', type: 'bool', indexed: false, internalType: 'bool' },
    ],
    anonymous: false,
  },
  { type: 'error', name: 'EthTransferFailed', inputs: [] },
  { type: 'error', name: 'InsufficientBalance', inputs: [] },
  { type: 'error', name: 'InvalidEthGoal', inputs: [] },
  { type: 'error', name: 'InvalidMsgValue', inputs: [] },
  { type: 'error', name: 'InvalidPresale', inputs: [] },
  { type: 'error', name: 'InvalidPresaleDuration', inputs: [] },
  { type: 'error', name: 'InvalidPresaleRecipient', inputs: [] },
  { type: 'error', name: 'InvalidPresaleSupply', inputs: [] },
  { type: 'error', name: 'InvalidTimeLimit', inputs: [] },
  { type: 'error', name: 'NoTokensToClaim', inputs: [] },
  { type: 'error', name: 'NoWithdrawFeeAccumulated', inputs: [] },
  { type: 'error', name: 'NotExpectingTokenDeployment', inputs: [] },
  {
    type: 'error',
    name: 'OwnableInvalidOwner',
    inputs: [{ name: 'owner', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'OwnableUnauthorizedAccount',
    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],
  },
  { type: 'error', name: 'PresaleAlreadyClaimed', inputs: [] },
  { type: 'error', name: 'PresaleClaimable', inputs: [] },
  { type: 'error', name: 'PresaleFailed', inputs: [] },
  { type: 'error', name: 'PresaleLockupNotPassed', inputs: [] },
  { type: 'error', name: 'PresaleNotActive', inputs: [] },
  { type: 'error', name: 'PresaleNotClaimable', inputs: [] },
  { type: 'error', name: 'PresaleNotLastExtension', inputs: [] },
  { type: 'error', name: 'PresaleNotReadyForDeployment', inputs: [] },
  { type: 'error', name: 'PresaleSaltBufferNotExpired', inputs: [] },
  { type: 'error', name: 'PresaleStillActive', inputs: [] },
  { type: 'error', name: 'PresaleSuccessful', inputs: [] },
  { type: 'error', name: 'ReentrancyGuardReentrantCall', inputs: [] },
  { type: 'error', name: 'Unauthorized', inputs: [] },
] as const;
